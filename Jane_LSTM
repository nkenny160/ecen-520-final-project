{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":84493,"databundleVersionId":9871156,"sourceType":"competition"}],"dockerImageVersionId":30805,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport polars as pl\ndf = pd.read_parquet(\"/kaggle/input/jane-street-real-time-market-data-forecasting/train.parquet/partition_id=0/part-0.parquet\")\ndf_pl = pl.read_parquet(\"/kaggle/input/jane-street-real-time-market-data-forecasting/train.parquet/partition_id=0/part-0.parquet\")\n\n# Three Cases\n# 1. Fully Empty columns : we can just drop them\n# 2. Partially Empty Columns: we can impute them\n# 3. Full Columns : No imputation necessary\n\nempty_columns = []\nfully_filled_columns = []\npartially_empty_columns = []\n\nfor feature in df_pl.columns:\n    # Count empty and non-empty rows\n    empty_rows = df_pl[feature].is_null().sum()\n    nonempty_rows = len(df_pl[feature]) - empty_rows\n\n    # Classify the columns based on the counts\n    if nonempty_rows == 0:\n        empty_columns.append(feature)\n    elif empty_rows == 0:\n        fully_filled_columns.append(feature)\n    else:\n        partially_empty_columns.append(feature)\n\n# We don't use df_pl again, so delete it to conserve memory\ndel df_pl\n\ndf.sort_values(['time_id','date_id'])\n\n# drop empty columns using imputer\ndf = df.drop(empty_columns, axis = 1)\n\n# Fill in partially empty columns\nfor feature in partially_empty_columns:\n    df[feature] = df.groupby('symbol_id')[feature].transform(lambda x: x.ffill().bfill())\n\n# Split data temporally - in partition0 there are 170 days and 849 unique time ids per day\ndf = df.sort_values(['date_id', 'time_id'])\ndate_counts = df.date_id.value_counts()\ndate_counts = pd.DataFrame(date_counts.sort_index())\ndate_counts['cumulative_sum'] = date_counts['count'].cumsum()\n\n# Organize columns into different groups\nTIME_FEATURES = ['relative_timestamp']\nMARKET_FEATURES = [f'feature_{i:02}' for i in range(0,79) if f'feature_{i:02}' in df.columns]\nRESPONDER_FEATURES = [f'responder_{i}' for i in range(0,9) if f'responder_{i}' in df.columns]\n# RESPONDER_FEATURES.remove('responder_6')\nSYMBOL_FEATURES = ['symbol_id']\n\n# Normalize Data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ncols_to_normalize = MARKET_FEATURES + RESPONDER_FEATURES\ndf[cols_to_normalize] = scaler.fit_transform(df[cols_to_normalize])\n\n# Determine splitting points\ntotal = len(df)\ntrain_percentage = 0.6\nval_percentage = 0.2\ntest_percentage = 0.2\napprx_train_len = int(total*train_percentage)\napprx_val_len = int(total*val_percentage) \napprx_test_len = total - apprx_train_len - apprx_val_len\n\n# Determine Splitting points\n\ndef split_func(row):\n    s = row['cumulative_sum']\n    if s <= apprx_train_len:\n        return 'Train'\n    elif (s > apprx_train_len) and (s <= apprx_train_len + apprx_val_len):\n        return 'Val'\n    elif (s > apprx_train_len + apprx_val_len):\n        return 'Test'\n    else:\n        raise ValueError\n\ndate_counts['Split'] = date_counts.apply(split_func, axis = 1)\n# print(date_counts.Split.value_counts())\n\nlast_train_data = date_counts[date_counts.Split == 'Train'].tail(1) \nfirst_test_data = date_counts[date_counts.Split == 'Test'].head(1)\n\n# Once Splitting points are determined, then make the necessary splits\n \ndef split_func_df(row):\n    s = row['date_id']\n    if s <= last_train_data.index[0]:\n        return 'Train'\n    elif (s > last_train_data.index[0]) and (s < first_test_data.index[0]):\n        return 'Val'\n    elif (s >= first_test_data.index[0]):\n        return 'Test'\n    else:\n        raise ValueError\n\n# Potentially encode time_id as sine/cosine to capture cyclical nature\n# train_df['time_sin'] = np.sin(2 * np.pi * train_df['time_id'] / max_time_id)\n# train_df['time_cos'] = np.cos(2 * np.pi * train_df['time_id'] / max_time_id)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:19:58.651512Z","iopub.execute_input":"2024-12-05T01:19:58.651833Z","iopub.status.idle":"2024-12-05T01:20:19.150571Z","shell.execute_reply.started":"2024-12-05T01:19:58.651806Z","shell.execute_reply":"2024-12-05T01:20:19.149626Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"df = df[df.symbol_id.isin(range(10))]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:20:19.152041Z","iopub.execute_input":"2024-12-05T01:20:19.152494Z","iopub.status.idle":"2024-12-05T01:20:19.614105Z","shell.execute_reply.started":"2024-12-05T01:20:19.152449Z","shell.execute_reply":"2024-12-05T01:20:19.613298Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"encoded = pd.get_dummies(df['symbol_id'], prefix='symbol_id')\nmax_symbol_id = df['symbol_id'].max()\nprint(f'This parquet has {max_symbol_id} distinct symbol_ids')\nencoded.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:20:19.615133Z","iopub.execute_input":"2024-12-05T01:20:19.615428Z","iopub.status.idle":"2024-12-05T01:20:19.647945Z","shell.execute_reply.started":"2024-12-05T01:20:19.615403Z","shell.execute_reply":"2024-12-05T01:20:19.647149Z"}},"outputs":[{"name":"stdout","text":"This parquet has 9 distinct symbol_ids\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   symbol_id_0  symbol_id_1  symbol_id_2  symbol_id_3  symbol_id_7  \\\n0        False         True        False        False        False   \n1        False        False        False        False         True   \n2        False        False        False        False        False   \n8        False         True        False        False        False   \n9        False        False        False        False         True   \n\n   symbol_id_8  symbol_id_9  \n0        False        False  \n1        False        False  \n2        False         True  \n8        False        False  \n9        False        False  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symbol_id_0</th>\n      <th>symbol_id_1</th>\n      <th>symbol_id_2</th>\n      <th>symbol_id_3</th>\n      <th>symbol_id_7</th>\n      <th>symbol_id_8</th>\n      <th>symbol_id_9</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"df = pd.concat([df, encoded], axis = 1)\ndf = df.drop(['symbol_id'], axis = 1)\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:20:19.649884Z","iopub.execute_input":"2024-12-05T01:20:19.650147Z","iopub.status.idle":"2024-12-05T01:20:19.940434Z","shell.execute_reply.started":"2024-12-05T01:20:19.650121Z","shell.execute_reply":"2024-12-05T01:20:19.939409Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   date_id  time_id    weight  feature_05  feature_06  feature_07  feature_08  \\\n0        0        0  3.889038    0.944836    0.266733    0.292798   -1.038046   \n1        0        0  1.370613    0.761208    0.169433    0.219469   -0.636408   \n2        0        0  2.285698    1.161356    0.207122    0.278843   -0.909250   \n8        0        1  3.889038    1.015072   -0.422322    0.089218   -0.856497   \n9        0        1  1.370613    0.972411   -0.265482    0.069314   -0.801669   \n\n   feature_09  feature_10  feature_11  ...  responder_6  responder_7  \\\n0    -0.73728    0.912814   -0.528156  ...     0.889632     0.389633   \n1    -0.73728    0.912814   -0.528156  ...     0.806566     0.243509   \n2    -0.73728    0.912814   -0.528156  ...     2.421228     0.752806   \n8    -0.73728    0.912814   -0.528156  ...     0.862059     0.390782   \n9    -0.73728    0.912814   -0.528156  ...     0.728011     0.011494   \n\n   responder_8  symbol_id_0  symbol_id_1  symbol_id_2  symbol_id_3  \\\n0     0.108072        False         True        False        False   \n1     0.889930        False        False        False        False   \n2     0.883280        False        False        False        False   \n8     0.046669        False         True        False        False   \n9     0.286561        False        False        False        False   \n\n   symbol_id_7  symbol_id_8  symbol_id_9  \n0        False        False        False  \n1         True        False        False  \n2        False        False         True  \n8        False        False        False  \n9         True        False        False  \n\n[5 rows x 89 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_id</th>\n      <th>time_id</th>\n      <th>weight</th>\n      <th>feature_05</th>\n      <th>feature_06</th>\n      <th>feature_07</th>\n      <th>feature_08</th>\n      <th>feature_09</th>\n      <th>feature_10</th>\n      <th>feature_11</th>\n      <th>...</th>\n      <th>responder_6</th>\n      <th>responder_7</th>\n      <th>responder_8</th>\n      <th>symbol_id_0</th>\n      <th>symbol_id_1</th>\n      <th>symbol_id_2</th>\n      <th>symbol_id_3</th>\n      <th>symbol_id_7</th>\n      <th>symbol_id_8</th>\n      <th>symbol_id_9</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>3.889038</td>\n      <td>0.944836</td>\n      <td>0.266733</td>\n      <td>0.292798</td>\n      <td>-1.038046</td>\n      <td>-0.73728</td>\n      <td>0.912814</td>\n      <td>-0.528156</td>\n      <td>...</td>\n      <td>0.889632</td>\n      <td>0.389633</td>\n      <td>0.108072</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1.370613</td>\n      <td>0.761208</td>\n      <td>0.169433</td>\n      <td>0.219469</td>\n      <td>-0.636408</td>\n      <td>-0.73728</td>\n      <td>0.912814</td>\n      <td>-0.528156</td>\n      <td>...</td>\n      <td>0.806566</td>\n      <td>0.243509</td>\n      <td>0.889930</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>2.285698</td>\n      <td>1.161356</td>\n      <td>0.207122</td>\n      <td>0.278843</td>\n      <td>-0.909250</td>\n      <td>-0.73728</td>\n      <td>0.912814</td>\n      <td>-0.528156</td>\n      <td>...</td>\n      <td>2.421228</td>\n      <td>0.752806</td>\n      <td>0.883280</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0</td>\n      <td>1</td>\n      <td>3.889038</td>\n      <td>1.015072</td>\n      <td>-0.422322</td>\n      <td>0.089218</td>\n      <td>-0.856497</td>\n      <td>-0.73728</td>\n      <td>0.912814</td>\n      <td>-0.528156</td>\n      <td>...</td>\n      <td>0.862059</td>\n      <td>0.390782</td>\n      <td>0.046669</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1.370613</td>\n      <td>0.972411</td>\n      <td>-0.265482</td>\n      <td>0.069314</td>\n      <td>-0.801669</td>\n      <td>-0.73728</td>\n      <td>0.912814</td>\n      <td>-0.528156</td>\n      <td>...</td>\n      <td>0.728011</td>\n      <td>0.011494</td>\n      <td>0.286561</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 89 columns</p>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"df['Split'] = df.apply(split_func_df, axis = 1)\ndf['Split'].value_counts()\n\ntrain_df = df[df.Split == 'Train']\nval_df = df[df.Split == 'Val']\ntest_df = df[df.Split == 'Test']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:20:19.941807Z","iopub.execute_input":"2024-12-05T01:20:19.942216Z","iopub.status.idle":"2024-12-05T01:20:32.404905Z","shell.execute_reply.started":"2024-12-05T01:20:19.942173Z","shell.execute_reply":"2024-12-05T01:20:32.404108Z"}},"outputs":[],"execution_count":5},{"cell_type":"markdown","source":"# LSTM model testing","metadata":{}},{"cell_type":"code","source":"features = ['date_id', 'time_id', 'feature_06', 'feature_07', 'feature_05', 'feature_68', 'responder_6']+list(encoded.columns)\n#features","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:20:32.406002Z","iopub.execute_input":"2024-12-05T01:20:32.406350Z","iopub.status.idle":"2024-12-05T01:20:32.411344Z","shell.execute_reply.started":"2024-12-05T01:20:32.406312Z","shell.execute_reply":"2024-12-05T01:20:32.410429Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"import numpy as np\ndef create_sequences(data, sequence_length):\n    X, y = [], []\n    for i in range(len(data) - sequence_length):\n        seq = data[i:i+sequence_length]\n        target = data['responder_6'].iloc[i+sequence_length]\n        X.append(seq)\n        y.append(target)\n    return np.array(X), np.array(y)\n\n# Create sequences\n#features = ['date_id', 'time_id', 'feature_06', 'feature_07', 'feature_05', 'feature_68', 'symbol_id', 'responder_6']\nX_train, y_train = create_sequences(train_df[features], sequence_length=50)\nX_val, y_val = create_sequences(val_df[features], sequence_length=50)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:20:32.412402Z","iopub.execute_input":"2024-12-05T01:20:32.412650Z","iopub.status.idle":"2024-12-05T01:21:51.179411Z","shell.execute_reply.started":"2024-12-05T01:20:32.412626Z","shell.execute_reply":"2024-12-05T01:21:51.178650Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# from tensorflow.keras.models import Sequential\n# from tensorflow.keras.layers import LSTM, Dense\n\n# model = Sequential()\n# model.add(LSTM(50, activation='relu', input_shape=(window_size, num_features)))\n# model.add(Dense(1))  # Predicting a single value\n# model.compile(optimizer='adam', loss='mse')\n# model.fit(X_train, y_train, epochs=50, batch_size=32)\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout\nfrom tensorflow.keras.mixed_precision import set_global_policy\nfrom tensorflow.keras.callbacks import TensorBoard\n\n# # Enable mixed precision\n# set_global_policy('mixed_float16')\n\n# # Enable XLA optimization\n# tf.config.optimizer.set_jit(True)\n\n# Define the model\nmodel = Sequential([\n    LSTM(64, activation='tanh', return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])),\n    Dropout(0.2),\n    LSTM(32, activation='tanh'),\n    Dropout(0.2),\n    Dense(1)  # Output layer for regression\n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mse', metrics=['mae'])\nmodel.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:21:51.180678Z","iopub.execute_input":"2024-12-05T01:21:51.180980Z","iopub.status.idle":"2024-12-05T01:22:03.368264Z","shell.execute_reply.started":"2024-12-05T01:21:51.180953Z","shell.execute_reply":"2024-12-05T01:22:03.367521Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ lstm (\u001b[38;5;33mLSTM\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m64\u001b[0m)         │        \u001b[38;5;34m20,224\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50\u001b[0m, \u001b[38;5;34m64\u001b[0m)         │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm_1 (\u001b[38;5;33mLSTM\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │        \u001b[38;5;34m12,416\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │            \u001b[38;5;34m33\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">20,224</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)         │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">12,416</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">33</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m32,673\u001b[0m (127.63 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">32,673</span> (127.63 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m32,673\u001b[0m (127.63 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">32,673</span> (127.63 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"\n\n# Create TensorFlow datasets\nbatch_size = 128  # Adjust for optimal GPU utilization\ntrain_data = tf.data.Dataset.from_tensor_slices((X_train.astype('float'), y_train.astype('float'))).batch(batch_size).prefetch(tf.data.AUTOTUNE)\nval_data = tf.data.Dataset.from_tensor_slices((X_val.astype('float'), y_val.astype('float'))).batch(batch_size).prefetch(tf.data.AUTOTUNE)\n\n# TensorBoard callback with profiling\ntensorboard_cb = TensorBoard(log_dir=\"./logs\", profile_batch='2,10')\n\n# Train the model\nhistory = model.fit(\n    train_data,\n    validation_data=val_data,\n    epochs=20,\n    verbose=1,\n    callbacks=[tensorboard_cb]\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:22:03.369553Z","iopub.execute_input":"2024-12-05T01:22:03.370008Z","iopub.status.idle":"2024-12-05T01:23:14.809649Z","shell.execute_reply.started":"2024-12-05T01:22:03.369981Z","shell.execute_reply":"2024-12-05T01:23:14.808929Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m3807/3807\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 10ms/step - loss: 0.7574 - mae: 0.5727 - val_loss: 0.9016 - val_mae: 0.6309\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"model.save('model.h5')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:23:14.811702Z","iopub.execute_input":"2024-12-05T01:23:14.811999Z","iopub.status.idle":"2024-12-05T01:23:14.848112Z","shell.execute_reply.started":"2024-12-05T01:23:14.811973Z","shell.execute_reply":"2024-12-05T01:23:14.847410Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"X_test, y_test = create_sequences(test_df[features], sequence_length=50)\ntest_data = tf.data.Dataset.from_tensor_slices((X_test.astype('float'), y_test.astype('float'))).batch(batch_size).prefetch(tf.data.AUTOTUNE)\nresult = model.evaluate(test_data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:23:14.849121Z","iopub.execute_input":"2024-12-05T01:23:14.849410Z","iopub.status.idle":"2024-12-05T01:23:45.523794Z","shell.execute_reply.started":"2024-12-05T01:23:14.849355Z","shell.execute_reply":"2024-12-05T01:23:45.522937Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m1207/1207\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 4ms/step - loss: 1.1920 - mae: 0.7382\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"s_0 = test_df[test_df.symbol_id_0 == 1]\nlen(s_0)\nsample_df = s_0.iloc[::100]\nprint(len(sample_df))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:24:06.482746Z","iopub.execute_input":"2024-12-05T01:24:06.483569Z","iopub.status.idle":"2024-12-05T01:24:06.496247Z","shell.execute_reply.started":"2024-12-05T01:24:06.483536Z","shell.execute_reply":"2024-12-05T01:24:06.495346Z"}},"outputs":[{"name":"stdout","text":"221\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"X_s, y_s = create_sequences(sample_df[features], sequence_length=50)\nsample_data = tf.data.Dataset.from_tensor_slices((X_s.astype('float'))).batch(batch_size).prefetch(tf.data.AUTOTUNE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:24:12.367863Z","iopub.execute_input":"2024-12-05T01:24:12.368685Z","iopub.status.idle":"2024-12-05T01:24:12.429419Z","shell.execute_reply.started":"2024-12-05T01:24:12.368652Z","shell.execute_reply":"2024-12-05T01:24:12.428663Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Get the data for responder_6 in the test set\nresponder_6_predictions = model.predict(sample_data)\nresponder_6_actual_values = y_s\n# Plot the actual vs predicted values\nplt.figure(figsize=(10, 6))  # Adjust figure size as needed \nplt.plot(range(len(responder_6_actual_values)), responder_6_actual_values, label='Actual Values')\nplt.plot(range(len(responder_6_predictions.squeeze())), responder_6_predictions.squeeze(), label='Predicted Values')  # Squeeze to remove extra dimension\nplt.xlabel('Time Step')\nplt.ylabel('Values')\nplt.title(f'Responder 6 - Actual vs Predicted Values')\nplt.legend()\nplt.grid(True)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-05T01:24:12.705878Z","iopub.execute_input":"2024-12-05T01:24:12.706199Z","iopub.status.idle":"2024-12-05T01:24:12.929739Z","shell.execute_reply.started":"2024-12-05T01:24:12.706173Z","shell.execute_reply":"2024-12-05T01:24:12.928821Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"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6N69O37zm9/glFNOwSWXXIIePXok9T5vvfUWiouL4XQ60adPH01wzjE6DzZs2IA1a9agqqrK8HVramoASOezzWaLet2hQ4cmHBtPD0z3+OVijJyTTjoJ5eXlmD17ttw/6fXXX8eoUaMwYsQI+XkffPAB7r33XqxYsUJTR5WpAJ5v6vCgUE9xcTGAzJw7BEHkBgqYCILIGmPHjpVd8s444wwcffTRmDZtGtatW4fCwkKIoggAuOWWW6KUGM7gwYMBAOPGjcOmTZvw3nvv4bPPPsO///1vPProo3juuedwxRVXZPVzxHINY2kYKoiiCEEQ8PHHHxu+Lq/94Kh3wxPRq1cvbNiwIarOqVu3bgAQdxf7+uuvl2uRAGD8+PFxG7u++uqrAIAbb7wRN954Y9Tv33rrraSVsXjEWsSGw+Gox6699lrMmjULN9xwA4444giUlJRAEAScf/758rmWCm63G2eccQbeeecdPPPMM9izZw+WLFmC+++/X/O8G264AaeeeireffddfPrpp7jzzjvxwAMP4IsvvsAhhxyS8H3GjRsn123Fwug8EEURI0eOxCOPPGL4N3379k343tkml2N0Op2YOnUq/vWvf2HPnj3Ytm0bNmzYgL///e/yc7788kucdtppGDduHJ555hn07NkTTqcTs2bNimtLDiR/LvJz7ZVXXjEMfBwOZenV0XOHIIjcQAETQRA5wW6344EHHsCxxx6Lp556CrfeequsBDmdTpxwwgkJX6O8vByXXXYZLrvsMrS2tmLcuHGYOXOmJmASRRG//vqrrAAAwPr16wFALqLu378/5s+fj5aWFo3KtHbtWvn3qcCd34zSBdetW6f5edCgQWCMYeDAgZoxZoIxY8bIaYxqlW3nzp3yOGPxpz/9CRdddJH8s9qYQw9jDLNnz8axxx6LP/zhD1G//+tf/4rXXnsNl112mTwO7igXi1iLUT4OfX8mvQoISOly06dPx8MPPyw/5vP5OtTb6bzzzsN//vMffP7551izZg0YY3I6nppBgwbh5ptvxs0334wNGzbg4IMPxsMPPywHltlg0KBBWLlyJY4//vi46kj//v0hiiI2bdqkUWz052as9wCk48c3L4yI9f65GKOaCy+8EM899xzmzJmDzZs3QxAEjeL61ltvwePx4NNPP9Wo3bNmzUr42upzUW3Moj8X+XfWrVu3pOY1M84dgiBSg2qYCILIGRMmTMDYsWPx2GOPwefzoVu3bpgwYQKef/557Nq1K+r5aoe0+vp6ze8KCwsxePDgKGtiAHjqqafk/2eM4amnnoLT6ZTTqqZMmYJwOKx5HgA8+uijEAQh5eaWdrsdkyZNwrvvvott27bJj69Zswaffvqp5rlnnXUW7HY77r777iiFijEW9TlTgS/kX3jhBfkxURQxa9YslJeXY8yYMTH/9oADDsAJJ5wg/4v33CVLlmDLli247LLLcM4550T9O++887BgwQLs3LkTVVVVGDduHF588UXNd8M/L6egoABAdGBUXFyMyspKLF68WPP4M888EzUuu90e9Z0++eSThmpUspxwwgkoLy/HnDlzMGfOHIwdOxYDBw6Uf+/1eqMaMQ8aNAhFRUWG52YmmTp1Knbs2IF//etfUb9rb29HW1sbAMjn8xNPPKF5TjKNZidOnIiioiI88MADUZ9Tf/yM0h5zMUY1Rx11FAYMGIBXX30Vc+bMwfjx4+WaSUA6RwRB0JwTW7Zs0bj1xYIHQupzsa2tTaPMAsCkSZNQXFyM+++/H8FgMOp1+Lxm5rlDEERqkMJEEERO+eMf/4hzzz0XL730En73u9/h6aefxtFHH42RI0fiyiuvxH777Yc9e/bgm2++wfbt27Fy5UoA0oJ+woQJGDNmDMrLy7Fs2TK8+eabGoMHAPB4PPjkk08wffp0HH744fj444/x4Ycf4i9/+YussJx66qk49thjcfvtt2PLli0YNWoUPvvsM7z33nu44YYbDGtIEnH33Xfjk08+wTHHHIM//OEPCIVCePLJJzFixAisWrVKft6gQYNw77334rbbbsOWLVtwxhlnoKioCJs3b8Y777yDq666Crfcckta3+3pp5+O448/Hg888ADq6uowatQovPvuu/jqq6/w/PPPRzX0TJfXXnsNdrs9pgXzaaedhttvvx1vvPEGbrrpJjzxxBM4+uijMXr0aFx11VUYOHAgtmzZgg8//BArVqwAADlAu/3223H++efD6XTi1FNPRUFBAa644gr87W9/wxVXXIFDDz0UixcvllVDNaeccgpeeeUVlJSU4IADDsA333yD+fPna+y5U8XpdOKss87CG2+8gba2NvzjH//Q/H79+vU4/vjjMXXqVBxwwAFwOBx45513sGfPHpx//vlpv28yXHzxxZg7dy5+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mDx5Mu699168+OKLqK2txTXXXINrrrkGs2bNwrJly3DdddfhlVdewZFHHom6ujrMnz8/rfdKFgqYCILoNISoDxNBEASRZRhj+Pzzz/Hpp5/i2muvlR/Pz8/Hv/71L3g8HgDAq6++ClEU8e9//xuCIACQgonS0lIsXLgQEydOxGOPPYbbbrsNZ511FgDgueeew6effhrzvdevX4+5c+di3rx5OOGEEwAA++23n/z78vJyAEC3bt1QWloKQFKk7r//fsyfPx9HHHGE/DdfffUVnn/+eYwfPx7PPvssBg0ahIcffhgAMHToUPz000948MEH434XM2bMwC233IInnngChYWFaGlpwZtvvoknnngCAKICv3/+858oLS3FokWLcMopp8R97Vg88MADuPDCC2XVbciQIXjiiSfkz7Ft2zYUFBTglFNOQVFREfr27YtBgwal9V7JQgETQRCdhjD1YSIIguhcOPMlpces906BDz74AIWFhQgGgxBFEdOmTcPMmTPl3x9wwAFwuVzyzytXrsTGjRujlBSfz4dNmzahqakJu3btwuGHHy7/zuFw4NBDD41Ky+OsWLECdrsd48ePT3rcGzduhNfrxYknnqh5PBAI4JBDDgEArFmzRjMOAHJwFY8LLrgAN954I+bOnYvLL78cc+bMgc1mw3nnnQcA2LNnD+644w4sXLgQNTU1CIfD8Hq92LZtW9Lj17Ny5UqsWrUKr732mvwYYwyiKGLz5s048cQT0b9/f+y3336YPHkyJk6ciOOPPx7FxcVpv2ciKGAiCKLToA6YQtSHiSAIwvoIQofS4nLJsccei2effRYulwu9evWCw6FdJufnawOw1tZWjBkzRrOw51RVVaU1Bp5ilwqtra0AgA8//BC9e/fW/M7tdqc1Dk5xcTHOOecczJo1C5dffjlmzZqFqVOnorCwEAAwffp01NfX4/HHH0f//v3hdrtxxBFHxDTFsNkk+wR1wKh32mttbcVvf/tbXHfddVF/369fP7hcLvz4449YuHAhPvvsM8ycORMzZ87E0qVLZQUu01DARBBEp4EUJoIgCCJbFBQUYPDgwUk/f/To0ZgzZw66desWU93o2bMnvvvuO4wbNw4AEAqF8MMPP2D06NGGzx85ciREUcSiRYvklDw1XOEKh8PyYwcccADcbje2bdsWU5kaPny4bGDB+fbbbxN/SEhpeRMmTMAHH3yAr7/+WuMcuGTJEjzzzDOYMmUKAMkEo66uLuZr8UBy165dKCsrAyCpampGjx6NX375Je6xcDgcOOGEE3DCCSfgzjvvRHl5Ob744gucc845SX2mVCGXPIIgOg0hcskjCIIgLMKFF16IyspKnH766fjyyy+xefNmLFy4ENdddx22b98OALj++uvxt7/9De+++y7Wrl2LP/zhD3F7KA0YMADTp0/H5ZdfjnfffVd+zblz5wIA+vfvD0EQ8MEHH6C2thatra0oKirCLbfcghtvvBH/+c9/sGnTJvz444948skn8Z///AcA8Lvf/Q4bNmzAH//4R6xbtw6zZ8/GSy+9lNTnHDduHAYPHoxLLrkEw4YNw5FHHin/bsiQIXjllVewZs0afPfdd7jwwgvjqmSDBw9G3759MXPmTGzYsAEffvihXFfF+fOf/4yvv/4a11xzDVasWIENGzbgvffewzXXXANASp184oknsGLFCmzduhUvv/wyRFGUnQuzAQVMBEF0GtSNa8n0gSAIgjCT/Px8LF68GP369cNZZ52F4cOHY8aMGfD5fLLidPPNN+Piiy/G9OnTccQRR6CoqAhnnnlm3Nd99tlncc455+APf/gDhg0bhiuvvFK21O7duzfuvvtu3HrrrejevbscRPz1r3/FnXfeiQceeADDhw/H5MmT8eGHH2LgwIEApFS2t956C++++y5GjRqF5557Dvfff39Sn1MQBFx++eVobGzE5ZdfrvndCy+8gMbGRowePRoXX3wxrrvuOnTr1i3mazmdTrz++utYu3YtDjroIDz44IO49957Nc856KCDsGjRIqxfvx7HHHMMDjnkEPzf//0fevWS3BZLS0vx9ttv47jjjsPw4cPxz3/+E//+978xYsSIpD5POggsVtXZPkhzczNKSkrQ1NSU1cKwZAgGg/joo48wZcqULtP0q7NAx8a6zPtlD658eRkA4KQR3fHsxYeaPCJCD10/1oWOjbXZV46Pz+fD5s2bMXDgQNlNbl9AFEU0NzejuLhYrsMhrEGiYxPvnEw2NqAjThBEp0GjMJHpA0EQBEEQOYACJoIgOg3qIClApg8EQRAEQeQACpgIgug0hKlxLUEQBEEQOYYCJoIgOg3aPkykMBEEQRAEkX0oYCIIotNAtuIEQRCdgy7kKUZYnEycixQwEQTRadCm5JHCRBAE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USgLmGq0D1Vzx82AqbbBVkxSGaXQttNzqgkhpJkI04ewFCbAXKx74VTDlLVlMzil5MnApob5KBrRENGAom4Gae3a3DWViJUCJqvCJM5BNl/EK1NGg8Z2+2wkHNrirG/btg1XX301li9fju7ubqxcuRI33HADstls5T8mpArsRaq12qKqdq5hNK4FlO7qeSXNjwETIYQ0jbBNH/zipTCJecEpbS8MW3H1PbK2gKldLMUFYrPUHjClEjEZIO2fyACoLcgk7UtbKEzPPfccisUi/uM//gOrVq3C008/jWuuuQaTk5P40pe+1OzDIzMIu8JU605SvfowAcYEVdStjxFCCGk8psLU2GWVk8IkNtJEECfmsaxFYQpHCYpHI0jnitKZr92a1goGS06ES4d7yn433JPEztFp06qdG5QdSVsETBs3bsTGjRvlzytWrMCmTZvwjW98gwETCZXueMgKk0NKXu224mazQBkwcQAnhJCmIWqYvJrM1gN/CpM1JS9XKCJfmjzsc161yA28vNX0od1qmP6f1x2N+7ccwKtXj5T9blZPXDZpBWpP1SftSVsETE4cPnwYQ0NDns/JZDLIZDLy57GxMQBALpdDLper6/FVQrx/s4+DWLE7rEZRrOkcxTSx61bAdNZ4naim1/aapWOczuQQLTn7xCNax1xLvHdaG56f1oXnpn6U4iV0x4KPxUHOj0iKmEpn5d9NZ4z/i3khAiOYyeSN+Ww8nTePu9Y5rvTBpzPG+09OG6USXbFIW11n6xb0Yt2CXujFAnLFguV3s2y27rEavzMSPrWMbX7/pi0Dpi1btuBrX/taRXXpc5/7HG666aayx2+77TakUql6HV5V3H777c0+BKKwdQxQb4t777oD3TXcJc+8ogGIYt/BV7A5ewhABC9texG33ro18Gse3B8BEMEfn3gKRrwUxejB/bj11luDH2gbwnunteH5aV14bsJnTl7DQCKC7MtP49Zbn67ptao5P3t2GvPB0889j1snnwMAbBo15p3pqUnceuutmMoDQAyFoo5f/O+tmMwZPwPAHbf9RvbzC0I+EwWg4Z77foftfcAf9hvvPX740IyZk6ZGje9Y8Pvf3YtUW66eZz5BxrapqSlfz2vqKf/rv/5rfP7zn/d8zrPPPos1a9bIn3fu3ImNGzfi0ksvxTXXXOP5t5/85Cdx/fXXy5/Hxsaw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3zQPcU94zTvz5s0rMx7K5/M4dOgQ76kGIIKl7du34/bbb7eoS05s2LAB+Xwe27Zta8wBEsmKFSswMjIixzLeO63Bfffdh02bNlWci4Dg9w8DpgaSSCRw4okn4o477pCPFYtF3HHHHTjttNOaeGSdia7ruO666/CTn/wEd955J5YvX17xbx5//HEAwPz58+t8dERlYmICW7duxfz583HiiSciHo9b7qNNmzZhx44dvI8azLe+9S3MmTMHr3vd6zyfx/umeSxfvhzz5s2z3C9jY2N46KGH5P1y2mmnYXR0FI8++qh8zp133olisSiDXVIfRLC0efNm/Pa3v8Xw8HDFv3n88ccRiUTKUsFI/Xn55Zdx8OBBOZbx3mkNvvnNb+LEE0/E+vXrKz436P3DlLwGc/311+PKK6/ESSedhFNOOQVf+cpXMDk5iXe/+93NPrSO49prr8X3vvc9/OxnP0NfX5/MNx4YGEB3dze2bt2K733ve7joooswPDyMJ598Eh/5yEdw5plnYt26dU0++pnNxz72MVx88cVYunQpdu3ahRtuuAHRaBSXX345BgYGcPXVV+P666/H0NAQ+vv78YEPfACnnXYaTj311GYfesdQLBbxrW99C1deeSViMXMq4X3TeCYmJizq3YsvvojHH38cQ0NDWLJkCT784Q/j7//+77F69WosX74cn/70p7FgwQK88Y1vBAAcddRR2LhxI6655hr8+7//O3K5HK677jq87W1vs6RakurxOjfz58/HW97yFjz22GP45S9/iUKhIOehoaEhJBIJPPDAA3jooYdwzjnnoK+vDw888AA+8pGP4B3veAdmzZrVrI81Y/A6P0NDQ7jpppvw5je/GfPmzcPWrVvx8Y9/HKtWrcIFF1wAgPdOvak0tgHGBtAPf/hDfPnLXy77+1Dvn5p99kjVfO1rX9OXLFmiJxIJ/ZRTTtEffPDBZh9SRwLA8b9vfetbuq7r+o4dO/QzzzxTHxoa0pPJpL5q1Sr9r/7qr/TDhw8398A7gLe+9a36/Pnz9UQioS9cuFB/61vfqm/ZskX+fnp6Wn//+9+vz5o1S0+lUvqf/dmf6bt3727iEXcev/nNb3QA+qZNmyyP875pPHfddZfjWHbllVfqum5Yi3/605/W586dqyeTSf3cc88tO28HDx7UL7/8cr23t1fv7+/X3/3ud+vj4+NN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"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}